name: Django - Note Taking - CI/CD

# Enable Buildkit and let compose use it to speed up image building
env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  AWS_ACCESS_KEY_ID: ${{ secrets.DJANGO_AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.DJANGO_AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-1
  ECR_REPOSITORY: my-cool-application
  IMAGE_TAG: ${{ github.sha }}
  ECR_URI: 814560518754.dkr.ecr.us-east-1.amazonaws.com/my-cool-application
  EKS_CLUSTER: ${{ secrets.EKS_CLUSTER }}
  BUCKET_NAME: ${{ secrets.DJANGO_AWS_STORAGE_BUCKET_NAME }}
  DJANGO_ADMIN_URL: ${{ secrets.DJANGO_ADMIN_URL }}
  DJANGO_SETTINGS_MODULE: ${{ secrets.DJANGO_SETTINGS_MODULE }}
  DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
  DJANGO_ALLOWED_HOSTS: ${{ secrets.DJANGO_ALLOWED_HOSTS }}
  DJANGO_ACCOUNT_ALLOW_REGISTRATION: ${{ secrets.DJANGO_ACCOUNT_ALLOW_REGISTRATION }}
  DJANGO_SERVER_EMAIL: ${{ secrets.DJANGO_SERVER_EMAIL }}
  POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
  POSTGRES_HOST: postgres # service name

on:
  pull_request:
    branches: [ "master" ]
    paths-ignore: [ "docs/**" ]

  push:
    branches: [ "master", "main" ]
    paths-ignore: [ "docs/**" ]


jobs:
  # linter:
  #   runs-on: ubuntu-latest
  #   steps:

  #     - name: Checkout Code Repository
  #       uses: actions/checkout@v2

  #     - name: Set up Python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: "3.9"
  #         cache: pip

  #     - name: Run pre-commit
  #       uses: pre-commit/action@v2.0.3

  # # With no caching at all the entire ci process takes 4m 30s to complete!
  # health-check-job:
  #   runs-on: ubuntu-latest

  #   steps:

  #     - name: Checkout Code Repository
  #       uses: actions/checkout@v2

  #     - name: Build the Stack
  #       run:  docker-compose -f local.yml build

  #     - name: Run DB Migrations
  #       run:  docker-compose -f local.yml run --rm django python manage.py migrate

  #     - name: Run Django Tests
  #       run:  docker-compose -f local.yml run django pytest

  #     - name: Tear down the Stack
  #       run:  docker-compose -f local.yml down
  
  # package job for building and publishing docker images
  package-job: 
    runs-on: ubuntu-latest
    # needs: [health-check-job] # will be fired if and only if health-check-job is passed.
    if: ${{ github.event_name == 'push' }} # will be fired if the trigger event is a push event.
    
    steps:
      - name: Checkout Code # checking out code.
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR            
        id: login-ecr                        
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push the image to Amazon ECR
        id: build-image                                                                                      
        env:                                                                                                          
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}  
        run: |
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG -f ./compose/production/django/Dockerfile .
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG"
      
      # - name: Set Repo Location # steps required to find the image id of our image from contiainer registry
      #   id: repo
      #   run: echo "::set-output name=repo_name::${{ env.ECR_URI }}${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}" # we are setting the image location as output to be used in later step
      
      # - name: Check Repo Location
      #   run: echo ${{ steps.repo.outputs.repo_name }} # checking our repo location
      
      # - name: Update Version
      #   run: |
      #       git_hash=$(git rev-parse --short "$GITHUB_SHA")
      #       version=$(cat ./charts/helm-example/values.yaml | grep version: | awk '{print $2}')
      #       sed -i "s/$version/${GITHUB_REF##*/}-$git_hash/" ./charts/helm-example/values.yaml
          
      # - name: Commit and push changes
      #   uses: devops-infra/action-commit-push@v0.5
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     commit_message: Version updated
  
  # deploy job is for deploying our code to eks cluster.
  trigger-argocd-job: 
    runs-on: ubuntu-latest
    needs: [package-job] # will require package-job to be successful for triggering
    if: ${{ github.event_name == 'push' }} # will be fire if the trigger event is a push event.
    
    steps:
      - name: Checkout code # checking out code.
        uses: actions/checkout@v2
        
      - name: Set Repo Location # steps required to find the image id of our image from contiainer registry
        id: repo
        run: echo "::set-output name=repo_name::${{ env.ECR_URI }}${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}" # we are setting the image location as output to be used in later step
      
      - name: Check Repo Location
        run: echo ${{ steps.repo.outputs.repo_name }} # checking our repo location
      
      - name: Update Version
        run: |
            version=$(cat ./k8s/values.yaml | grep version: | awk '{print $2}')
            sed -i "s/$version/$IMAGE_TAG/" ./k8s/values.yaml
          
      - name: Commit and push changes
        uses: devops-infra/action-commit-push@v0.5
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          commit_message: Version updated
      
      # - name: Install Helm # helm installation in our runner for deploying.
      #   run: |
      #     curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
      #     chmod 700 get_helm.sh
      #     ./get_helm.sh
      
      # - name: Connect to kubernetes cluster
      #   run: |
      #     aws eks --region ${{ env.AWS_REGION }} update-kubeconfig --name ${{ env.EKS_CLUSTER }}
      
      # - name: Get active Nodes
      #   run: kubectl get nodes




      # - name: Install release
      #   uses: hiberbee/github-action-helm@latest
      #   with:
      #     helm: upgrade --install --wait --atomic --set image=${{ steps.repo.outputs.repo_name }} --set user=${{ env.DB_USER }} --set password=${{ env.DB_PASSWORD }} --set host=${{ env.DB_HOST }} --set name=${{ env.DB_NAME }} --set access_key=${{ env.AWS_ACCESS_KEY_ID }} --set secret_key=${{ env.AWS_SECRET_ACCESS_KEY }} --set bucket=${{ env.BUCKET_NAME }} app ./k8s 
      # - name: Check pods # checking pod list to see if they are running.
      #   run: kubectl get pods
      # - name: Get Service details
      #   run: kubectl get svc
      # - name: Make migration
      #   run: kubectl exec -i "$(kubectl get pods | awk '$0 ~ /app-deployment-/ {print $1}' | head -1)" python manage.py makemigrations
      # - name: Run Migrations
      #   run: kubectl exec -i "$(kubectl get pods | awk '$0 ~ /app-deployment-/ {print $1}' | head -1)" python manage.py migrate